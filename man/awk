内置变量表
$0	当前记录（作为单个变量）
$1~$n	当前记录的第n个字段，字段间由FS分隔
FS	输入字段分隔符 默认是空格
NF	当前记录中的字段个数，就是有多少列
NR	已经读出的记录数，就是行号，从1开始
RS	输入的记录他隔符默 认为换行符
OFS	输出字段分隔符 默认也是空格
ORS	输出的记录分隔符，默认为换行符
ARGC	命令行参数个数
ARGV	命令行参数数组
FILENAME	当前输入文件的名字
IGNORECASE	如果为真，则进行忽略大小写的匹配
ARGIND	当前被处理文件的ARGV标志符
CONVFMT	数字转换格式 %.6g
ENVIRON	UNIX环境变量
ERRNO	UNIX系统错误消息
FIELDWIDTHS	输入字段宽度的空白分隔字符串
FNR	当前记录数
OFMT	数字的输出格式 %.6g
RSTART	被匹配函数匹配的字符串首
RLENGTH	被匹配函数匹配的字符串长度
SUBSEP	数组分隔符。将(I,J)转换为 I SUBSEP J, 模拟多维数组用


数学
 int(expr)	 取整函数（truncates integer）
 sqrt(expr)	 平方根函数（square root）
 exp(expr)	 指数函数（exponential）
 log(expr)	 自然对数函数（natural logarithm） 注释 1
 sin(expr)	 正弦函数（sine） 注释 2
 cos(expr)	 余弦函数（cosine） 注释 2
 atan2(y, x)	 反正切函数（arctangent） 注释 3
 srand([expr])	 随机数种子函数 注释 4
 rand()	 随机函数 注释 5

字符串
sub( Ere, Repl, [ In ] )	除了正则表达式所有具体值被替代这点，它和 sub 函数完全一样地执行，。

sub( Ere, Repl, [ In ] )	用 Repl 参数指定的字符串替换 In 参数指定的字符串中的由 Ere 参数指定的扩展正则表达式的第一个具体值。sub 函数返回替换的数量。出现在 Repl 参数指定的字符串中的 &（和符号）由 In 参数指定的与 Ere 参数的指定的扩展正则表达式匹配的字符串替换。如果未指定 In 参数，缺省值是整个记录（$0 记录变量）。

index( String1, String2 )	在由 String1 参数指定的字符串（其中有出现 String2 指定的参数）中，返回位置，从 1 开始编号。如果 String2 参数不在 String1 参数中出现，则返回 0（零）。

length [(String)]	返回 String 参数指定的字符串的长度（字符形式）。如果未给出 String 参数，则返回整个记录的长度（$0 记录变量）。

blength [(String)]	返回 String 参数指定的字符串的长度（以字节为单位）。如果未给出 String 参数，则返回整个记录的长度（$0 记录变量）。

substr( String, M, [ N ] )	返回具有 N 参数指定的字符数量子串。子串从 String 参数指定的字符串取得，其字符以 M 参数指定的位置开始。M 参数指定为将 String 参数中的第一个字符作为编号 1。如果未指定 N 参数，则子串的长度将是 M 参数指定的位置到 String 参数的末尾 的长度。

match( String, Ere )	在 String 参数指定的字符串（Ere 参数指定的扩展正则表达式出现在其中）中返回位置（字符形式），从 1 开始编号，或如果 Ere 参数不出现，则返回 0（零）。RSTART 特殊变量设置为返回值。RLENGTH 特殊变量设置为匹配的字符串的长度，或如果未找到任何匹配，则设置为 -1（负一）。

split( String, A, [Ere] )	将 String 参数指定的参数分割为数组元素 A[1], A[2], . . ., A[n]，并返回 n 变量的值。此分隔可以通过 Ere 参数指定的扩展正则表达式进行，或用当前字段分隔符（FS 特殊变量）来进行（如果没有给出 Ere 参数）。除非上下文指明特定的元素还应具有一个数字值，否则 A 数组中的元素用字符串值来创建。

tolower( String )	返回 String 参数指定的字符串，字符串中每个大写字符将更改为小写。大写和小写的映射由当前语言环境的 LC_CTYPE 范畴定义。

toupper( String )	返回 String 参数指定的字符串，字符串中每个小写字符将更改为大写。大写和小写的映射由当前语言环境的 LC_CTYPE 范畴定义。

sprintf(Format, Expr, Expr, . . . )	根据 Format 参数指定的 printf 子例程格式字符串来格式化 Expr 参数指定的表达式并返回最后生成的字符串。

位操作:
and(value1, value2)	 value1 和 value2 按位与
 or(value1, value2)	 value1 和 value2 按位或
 xor(value1, value2)	 value1 和 value2 按位异或
 compl(value)	 value 按位取反
 lshift(value, count)	 value 左移 count 位
 rshift(value, count)	 value 右移 count 位

时间
 strftime(format)	 使用指定格式输出时间 注释 1
 systime()	 从 1970.01.01 00:00:00 以来经过的秒数

%%
 % 字符
 %n
 换行符
 %t
 水平制表符
 %a	 当前 locale 下的星期名简写；如：五
 %A	 当前 locale 下的星期名全称；如：星期五
 %b	 当前 locale 下的月份名简写；如： 9月
 %B	 当前 locale 下的月份名全称；如：九月
 %h	 等同于 %b
 %x
 当前 locale 下的日期；如：2012年09月21日
 %X
 当前 locale 下的时间；如：06时43分24秒
 %p
 当前 locale 下的上午或者下午；如：上午
 %P
 当前 locale 下的上午或者下午，输出小写字母；如：上午
 %r
 当前 locale 下的 12 时制时钟时间；如：上午 06时44分04秒
 %c	 当前 locale 下的日期和时间；如：2012年09月21日 星期五 06时44分16秒
 %G
 当前年份；如：2012
 %Y
 当前年份；如：2012
 %C	  当前年份的前两位数字（世纪）；如：20
 %g	  当前年份的后两位数字；如：12
 %y	  当前年份的后两位数字；如：12
 %m	 当前月份；如：09
 %d	 按月计的日期；日期值只有一位时，补零；如：21
 %e
 按月计的日期；日期值只有一位时，补空格；等同于 %_d；如：21
 %j	  按年计的日期；如：265
 %D	 日期；等同于 %m/%d/%y；如：09/21/12
 %F
 完整的日期；等同于 %Y-%m-%d；如：2012-09-21
 %H
 24 时制小时；时间值只有一位时，补零；如：06
 %I
 12 时制小时；时间值只有一位时，补零；如：06
 %k
 24 时制小时；时间值只有一位时，补空格；等同于 %_H；如： 6
 %l
 12 时制小时；时间值只有一位时，补空格；等同于 %_I；如： 6
 %M
 分；如：51
 %S
 秒；如：11
 %R
 24 时制小时、分；等同于 %H:%M；如：06:51
 %T
 24 时制小时、分、秒；等同于 %H:%M:%S；如：06:51:30
 %s
 从 1970.01.01 00:00:00 以来经过的秒数
 %u
 一星期中的第几日；1 表示星期一；7 表示星期天
 %w
 一星期中的第几日；0 表示星期天
 %U
 一年中的第几周，以星期天为每星期第一天
 %V
 一年中的第几周，以星期一为每星期第一天
 %W
 一年中的第几周，以星期一为每星期第一天
 %z
 数字时区；如：+0800
 %Z
 字母时区缩写；如：CST
